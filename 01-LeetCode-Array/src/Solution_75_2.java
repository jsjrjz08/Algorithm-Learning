/**
 * 给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，
 * 使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。
 * 此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。
 *
 * 举例:
 * 输入: [2,0,2,1,1,0]
 * 输出: [0,0,1,1,2,2]
 */
public class Solution_75_2 {

    //时间 O(n)
    //空间 O(1)
    //一次遍历：
    // 荷兰国旗问题：设置两个指针分别标记所有0元素的最右侧索引r0、所有2元素的最左侧索引l2，
    //这两个索引将整个结果集分成了三部分，左右两端的数据整理完毕，中间部分就是剩余的1了。
    //再设置一个遍历指针cur，在区间[0,l2)逐次遍历
    //如果当前元素==1，则继续下一个元素；
    //如果当前元素==0，则交换r0+1与当前位置的元素、r0++、继续下一个元素；
    //如果当前元素==2，则交换l2-1与当前位置的元素、l2--、接着判断i位置的元素(不要继续下一个元素)...
    //写逻辑的过程中一定要清楚r0,l2,cur指针的含义以及区间的开闭，前后要一致
    //三路快排partition 小于1，等于1，大于1 三个partition
    public void sortColors(int[] nums) {
        int size = nums.length;
        //[0...r0]区间内的元素都是0
        int r0 = -1;//保证初始情况下[0...-1]内没有元素
        //[l2...size-1]区间内的元素都是2
        int l2 = size;//保证初始情况下[size...size-1]内没有元素
        //(r0,l2)区间内，即[r0+1,l2-1]区间内的元素都是1

        int cur=0;
        while(cur < l2) {//不能有cur==l2：l2指向的元素一定是2了，不必再做下面的交换操作了。另外，cur<l2也包含了空数组的处理情况
            int curNum = nums[cur];
            if(curNum == 1) {
                cur ++;
            } else if(curNum < 1) {
                swap(nums,r0+1,cur);
                r0++;
                cur++;
            } else {//(curNum > 1) {
                swap(nums,l2-1,cur);
                l2--;
            }
        }

    }

    //交换数组中两个下标的元素
    private void swap(int[] nums,int i,int j) {
        if(i == j) {
            return;
        }
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}
